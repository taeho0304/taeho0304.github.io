I""<h2 id="좋은-객체-지향-설계의-5가지-원칙solid">좋은 객체 지향 설계의 5가지 원칙(SOLID)</h2>

<h3 id="solid란">SOLID란?</h3>

<h4 id="클린코드로-유명한-로버트-마틴이-정리한-좋은-객체-지향-설계의-5가지-원칙">클린코드로 유명한 로버트 마틴이 정리한 좋은 객체 지향 설계의 5가지 원칙</h4>

<ul>
  <li>SRP (single resposibility principle) : 단일 책임 원칙</li>
  <li>OCP : 개방-폐쇄 원칙 (Open/closed priciple)</li>
  <li>LSP : 리스코프 치환 원칙 (Liskov substitution priciple)</li>
  <li>ISP : 인터페이스 분리 원칙 (Interface segregation priciple)</li>
  <li>DIP : 의존관계 역전 원칙 (Despendency inversion priciple)</li>
</ul>

<h4 id="1-srp-단일-책임-원칙">1. SRP 단일 책임 원칙</h4>

<ul>
  <li>하나의 클래스는 하나의 책임만 가져야 한다.</li>
</ul>

<p>사실 하나의 책임이라는 말은 모호한 부분이 있다. 책임이라는 것은 클 수도, 작을 수도 있고 문맥과 상항에 따라 다를 수가 있다. 그래서 이 부분에서 설계가 잘 되었는지 판단할 수 있는 기준이 필요한데 이러한 중요한 판단의 기준은 ‘변경’이다.</p>

<ul>
  <li>중요한 기준은 변경</li>
</ul>

<p>어떠한 변경이 있을때 파금이 적으면 SRP를 잘 따른 것이고 파급이 크다면 잘 따르지 못했다고 할 수 있다. 예를 들어 UI하나를 변경하는데 SQL 코드부터 application까지 모두 고쳐야하는 상황이 생긴다면, SRP를 따르지 않고 설계한 것이다. 반대로 변경이 있을 때 하나의 클래스나 하나의 지점만 고치면 SRP를 잘 따르는 것이라고 볼 수 있다.</p>

<ul>
  <li>책임의 범위를 잘 조절하는 것이 필요</li>
</ul>

<p>책임의 범위를 너무 작게 하면 class가 너무 잘게 쪼개지고 너무 크게하면 책임이 많아져 이를 잘 조절하는 것이 객체지향의 묘미!</p>

<h4 id="2-ocp-개방-폐쇄-원칙">2. OCP 개방-폐쇄 원칙</h4>

<ul>
  <li>소프트웨어 요소는 확장에는 열려 있으나 변경에는 닫혀 있어야 한다.</li>
</ul>

<h4 id="3-lsp-리스코프-치환-원칙">3. LSP 리스코프 치환 원칙</h4>

<ul>
  <li>프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.</li>
</ul>

<p>다형성에서 하위 클래스는 인터페이스 규약을 지켜 기능적으로 보장을 해줘야 한다는 개념이다. 예를 들어 자동차 인터페이스를 상속받아 엑셀 기능을 구현할 때 엑셀기능은 앞으로 전진하도록 구현해야 한다. 만약 엑셀을 앞이 아닌 뒤로 가도록 구현한다면 컴파일은 단계에서는 문제가 없지만 엑셀은 앞으로 전진한다느 규약을 지키지 않아 LSP를 위반하는 것이다.</p>

<h4 id="4-isp-인터페이스-분리-원칙">4. ISP 인터페이스 분리 원칙</h4>

<ul>
  <li>특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 낫다.</li>
</ul>

<p>예를 들어 자동차 인터페이스를 운전자 인터페이스워 정비 인터페이스를 분리하면 client를 사용자 client와 정비 client로 분리할 수 있고, 분리된 사용자 client는 다시 운전자 client와 정비사 client로 분리할 수 있다. 이렇게 인터페이스를 분리해 사용하면 정비 인터페이스가 변해도 운전자 클라이언트에 영향을 주지 않는다. 즉 인터페이스를 특정 client를 위해 분리해 놓으면 인터페이스가 명확해지고 대체 가능성이 높아진다.</p>

<h4 id="5-dip-의존관계-역전-원칙">5. DIP 의존관계 역전 원칙</h4>

<ul>
  <li>프로그래머는 “추상화에 의존해야지, 구체화에 의존하면 안된다.” 라는 원칙을 따르는 방법 중 하나이다.</li>
</ul>

<p>구현클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻이다.
<img src="https://taeho0304.github.io/assets/img/Etc/DIP_ex_1.PNG" alt="" /></p>
:ET