I"a	<h2 id="페이징과-스와핑">페이징과 스와핑</h2>

<h4 id="페이징이란">페이징이란?</h4>

<p>프로세스가 적재되는 물리 주소 공간이 연속적이지 않아도 적재를 허용하는 메모리 관리 기법이다. 연속 메모리 할당 기법에서 발생하는 외부 단편화와 그에따른 압축 작업을 피할 수 있다.</p>

<h4 id="기본-방법">기본 방법</h4>

<h4 id="페이지-테이블-만들기">페이지 테이블 만들기</h4>

<p>테이블 페이지의 하드웨어 구현은 여러가지 방법으로 될 수 있다.</p>

<p>먼저 페이지의 크기가 작은 경우 <strong>CPU 내부</strong>에 페이지 테이블을 만들 수 있다. 이 경우 여러개의 레지스터를 이용해 테이블을 만들어 주소 변환 속도가 매우 빠르다. 하지만 테이블의 <strong>크기가 매우 제한</strong>된다는 단점이 있어 거의 사용되지 않는 방법이다.</p>

<p>크기 제한을 해결하기 위해 대부분의 컴퓨터는 페이지 테이블을 <strong>주 메모리</strong>에 저장하고 페이지 테이블 기준 레지스터 ( PTBR, Page-Table Base Register )로 하여금 페이지 테이블을 가리키는 방법을 사용한다. 하지만 CPU는 프로세스의 주소에 접근하기 위해서 메모리에 위치한 페이지 테이블에 한 번, 실제 주소에 접근하는데 한 번으로 메모리에 총 2번 접근해야 한다. 따라서 <strong>메모리 접근 속도가 두 배로 느려진다</strong>는 단점이 있다.</p>

<p>위의 메모리 접근 속도 문제를 해결하기 위해 <strong>TLB (Translation Look-aside Buffer)</strong>라고 불리는 특수한 소형 하드웨어 캐시를 사용한다. TLB 내의 각 항목은 <strong>key(페이지 번호)</strong>와 <strong>value(프레임 번호)</strong>의 두 부분으로 구성된다.</p>

<p><img src="https://taeho0304.github.io/assets/img/OS/Paging/tlb.PNG" alt="" /></p>

<p>접근하려는 메모리의 페이지 번호가 TLB에서 발견(TLB hit)되는 비율 <strong>적중률(hit ratio)</strong>이라고 부른다.</p>

<p>예를 들어 메모리 접근 시간을 10ns라고 가정하고 TLB를 이용한 실제 메모리 접근 시간을 한 번 계산해보자.</p>

<ul>
  <li>80% hit ratio : 0.80 x 10 + 0.20 x 20 = 12ns</li>
  <li>99% hit ratio : 0.99 x 10 + 0.01 x 20 = 10.1ns</li>
</ul>
:ET